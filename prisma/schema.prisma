// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    supermarkets  Supermarket[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Supermarket {
    id String @id @default(cuid())
    name String
    user User @relation(fields: [userId], references: [id])
    userId String
    suppliers Supplier[]
    categories Category[]
    products Product[]
    sales Sale[]
    createdAt DateTime @default(now())
}

model Supplier {
    id String @id @default(cuid())
    name String
    email String
    supermarket Supermarket @relation(fields: [supermarketId], references: [id])
    supermarketId String
    orders SupplierOrder[]
    products Product[]
    createdAt DateTime @default(now())
}

model Category {
    id String @id @default(cuid())
    name String
    supermarket Supermarket @relation(fields: [supermarketId], references: [id])
    supermarketId String
    products Product[]
    createdAt DateTime @default(now())
}

model Product {
    id String @id @default(cuid())
    code String
    name String @db.Text
    description String @db.Text
    unit String
    cost Int
    quantityLeft Int
    dateDelivered DateTime?
    supplier Supplier @relation(fields: [supplierId], references: [id])
    supplierId String
    category Category @relation(fields: [categoryId], references: [id])
    categoryId String
    supermarket Supermarket @relation(fields: [supermarketId], references: [id])
    supermarketId String
    sales Sale[]
    orders SupplierOrder[]
    createdAt DateTime @default(now())
}


model SupplierOrder {
    id String @id @default(cuid())
    deliveryDate DateTime
    product Product @relation(fields: [productId], references: [id])
    productId String
    supplier Supplier @relation(fields: [supplierId], references: [id])
    supplierId String
    quantity Int
    status String
    createdAt DateTime @default(now())
}

model Sale {
    id String @id @default(cuid())
    product Product @relation(fields: [productId], references: [id])
    productId String
    supermarket Supermarket @relation(fields: [supermarketId], references: [id])
    supermarketId String
    quantity Int
    saleDate DateTime @default(now())
}
